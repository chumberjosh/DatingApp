Section 1 - What we're going to do
  1. Introduction

Section 2 - Checking functionality and prepaing the development environment
  1. Walking Skeleton (create a small chunk of the program to test functionality)
     Creating the application arcitechture
	- Database
	- ORM (entity framework)
	- API (This fetches the information to be displayed on the SPA)
	- SPA (Angular Application)
  2. Creating the web API Project - 
  3. Review the default files created by the DotNetCLI - the tool we're going to be using to create the web api
  4. Ensure the web API runs successfully
  5. Create our database using the Code first approach
  6. Add source control -  to check in the changes
  7. Create the Angular Application
  8. Make HTTP requests from angular to fetch data from our API - configure the application to fetch data from the API
  9. Bind data from the API to the HTML to display it on the page
  10. Add support for Bootstrap and Font Awesome - so we can make the styling easier

Section 3 - The database
  1. How we store passwords in the database
  2. Creating the User Model - adding new migrations
  3. The repository pattern - why we should use it
  4. Creating the authenticaion controller
  5. Data transfer objects
  6. Token authentication - when a user logs in we dont want them to keep having to log in when they go and come back in a short amount of time
  7. Authentication Middleware - use it to protect our controllers and the methods inside them

Section 4 - Creating the webpage
  1. Creating Login and Navbar
  2. Angular Template Forms - how angular handles forms
  3. Usings services in Angular - how we use our own servies in angular, we dont want to put all the methods scattered around the API, we want them all in one place and then
inject them in
  4. Conditionally displaying elements on a page - display certain information based on ceratin things
  5. Create a register component - so users can register
  6. Component communication - the components are going to need to communicate to eachother, the child component -> parent component and vice versa

Section 5 - Errors and exceptions
  1. Handling exceptions in the API
  2. Setting up the Global exception Handler in the API
  3. Handling errors in Angular

Section 6 - Optimising the webpage for the user
   1. Alertifyjs - provide notifications to the user (a better way of telling the user that there is an error than putting it in the console)
	We used the 'npm install function to install alertify'
	Alertifyjs was then added to the node_modules
	We added the "node_modules/alertifyjs/build/alertify.min.js" into angular.json inside a script
	We then imported alertify into styles.css
	We then generated a service called alertify in the '-SPA >src >app >services' folder (this created 2 .ts files) 
	View 'alertify.service.ts' to see what was done inside this	
	Added 'AlertifyService' as a provider inside 'app.module.ts'
	Made sure that 'Alertifyservice' is imported at the top of 'app.module.ts'		(import { AlertifyService } from './_services/alertify.service';)
	We added the alertify service to the 'nav.component.ts' - check the file to see what has been done
	We also add it to register.componenet.ts

   2. Angular JWT (lec 55 and 56) - This just checks that a token actually exists and if it has expired
	This is the one we use - https://github.com/auth0/angular2-jwt
	View section 6, lecture 55 and 56 on how to do this
	We then make the 'welcome user' on the top right say 'welcome [users name]
	We then change the code so it will last through a refresh because otherwise the name would disappear after a page refresh

   3. NGX Bootstrap - We're using NGX Bootstrap because it provides similar functionality to Bootstrap JS but we're not using Bootstrap because that needs jQuery which
we're not using
	Watch Lecture 56, here we made it so the dropdown menu where it says 'welcome [user] works
	We also did some more conditional rendering so the buttons only show when a user is logged in

   4. Bootswatch - This will allow us to change the theme to the site (colours, look and feel)
	Watch Lecture 57 on how to import this and how to edit it so you can customise it and make it look however you want it to look

Section 7 - Routing in Angular - Why we need routing? We need Routing because we're creating a Single Page Application, this means we're not going to different pages and
routing allows us to find and load different parts of the application without having to reload the page. It will still change the URL even though we're on the same page
   1. Setting up routing
	We created 3 cinponents in the 'app' file
	   1. Lists - for the list of users that have likeed the currently logged in user and the list of users they have liked
	   2. member-list - the list of other users
	   3. messages - for the messages
	We then checked in the app.modeule.ts file to see if they had all been brought in and imported
	at the app folder we generated a new file called 'routes.ts' - view this to see what has been done
	We then added it to the 'app.module.ts' inside imports: and in the top import (the list that comes from node modules)

   2. Use RouterLinkActinve - we can make our links our pages look like they're the active page that is being loaded
	View lecture 61, we're adding route links in the 'nav.component.html'
   3. Using Routing in Code - Navigate users from one part of the application to another without adding links into our html
	View lecture 62, here we made it so you the URL changes depending on what you click

   4. Protecting the routes - We're going to have a lot of user information so we dont want to give full access to anonymous users
	View lecture 63, here we made it so you have to be authenticated to view different pages, even if you type in the URL
	We created a folder in the 'app' file called '_guards' which is where the route guards will be

   5. Protecting multiple routes at once - with one route guard
	View lecture 64, here we protected multiple routes with a single guard
	We do this using child guards - 'routes.ts'

Section 8 - Extending the API
   1. Extending the User class - providing more info about the user
	Adding more Columns to the table

   2. More Migrations
	Watch lecture 67 onwards to figure out how to sort out migrations etc.

   3. Cascade Delete - Do we want to delete multiple things at once? (In this example we are doing it so if a user account is deleted, so is the photo on that account
	Lecture 69 (may need to watch 68 / 67 first)

   4. Seeding Data into our databse - Add more values and users in the database to work with them in the angular application
	Lecture 70 and 71 - A more efficient way of adding data to our database / generating data to populate our database - this is reffered to seeding the data
	   Lecture 70 - Creating the Data
	   Lecture 71 - Actually seeding the data in to the database
	We commentedout the command to seed the users into the database, if we need to use it again, uncomment 'seeder.SeedUsers();' around line 82 in 'Startup.cs'

   5. Creating a new Repository
	Lecture 72 - Here we create a new repository for multiple different things
	Lecture 73 - Here we create the UsersController
	   By doing this we are able to find all users through postman aswell as finding them seperately by typing their ID into the URL (Watch lecture 73 (maybe 72) to understand this further)
		http://localhost:5000/api/users/
		http://localhost:5000/api/users/[1-10] 

   6. Using Automapper - Mapping DTO's to models
	Lecture 74 - Here we shape what we send to the user so we can choose what they send, e.g currently they can see too much info (like the pass hash+aslt) so we 
	should make it so they can't see that
	Lecture 75 - Using AutoMapper - Here we have chosen what we are showing to the user so we are not showing the password or anything